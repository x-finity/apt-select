#!/bin/bash
#set -x
DEBUG="false"

urlcheck() {
	url=$1
	[[ -z $(echo $url | grep --color=none "ubuntu-ports") ]] && url2=`echo $url | sed 's~/ubuntu[^/|^\.]*/$~/ubuntu-ports/~'` || url2=""
	if timeout 2s curl --retry 2 -sIm 1 "${url}dists/$DIST/main/binary-$ARCH/Release" | grep "200 OK" &>- ; then
		echo $url
	elif [ $ARCH != "amd64" ] && [[ -n "$url2" ]]; then
		if timeout 2s curl --retry 2 -sIm 1 "${url2}dists/$DIST/main/binary-$ARCH/Release" | grep "200 OK" &>- ; then echo $url2; fi
	fi
}

if [[ $(uname -m) == "aarch64" ]]; then
	ARCH=arm64
elif [[ $(uname -m) == "x86_64" ]]; then
	ARCH=amd64
elif [[ $(uname -m) =~ "arm" ]]; then
	ARCH=armhf
else
	echo "arch not detected!" && exit 1
fi

#[[ -z $(which sem) ]] && echo "No sem found, please install parallel" && exit 1
if [ "`id -u`" -gt 0 ] ; then
	# If we are not, is netselect setuid?
	if [ ! -u "$NETSELECT" ] ; then
		echo "Sorry, you need to be root to run $0 since the netselect"
		echo "binary we will use ($NETSELECT) is not setuid."
		exit 1
	fi
fi
if [ -z $(which netselect) ]; then
	if [ -n $TMP ]; then
		TMPPREFIX=$TMP
	elif [ -n $TMPDIR ]; then
		TMPPREFIX=$TMP
	elif [ -z $TMPPREFIX ]; then
		TMPPREFIX=/tmp
	fi
	if [ "$ARCH" = "amd64" ]; then
		wget http://ftp.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-29_amd64.deb -O ${TMPPREFIX}/netselect.deb
	elif [ "$ARCH" = "arm64" ]; then
		wget http://ftp.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-29_arm64.deb -O ${TMPPREFIX}/netselect.deb
	elif [ "$ARCH" = "armhf" ]; then
		wget http://ftp.de.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-29_armhf.deb -O ${TMPPREFIX}/netselect.deb
	fi
	dpkg -i ${TMPPREFIX}/netselect.deb && apt install -f
	rm ${TMPPREFIX}/netselect.deb
fi

echo "$@" | grep -q "\-v" && DEBUG="true" || DEBUG="false"
$DEBUG && echo "$@"

if grep -qi ubuntu /etc/os-release; then
	OS="ubuntu"
	DIST=`lsb_release -c | awk '{printf "%s",$2}'`
	help="Usage: apt-select N SRC\n\tN - Number of mirrors\n\tSRC - local or all"
elif grep -qi debian /etc/os-release; then
	OS="debian"
	help="Usage: apt-select N SRC\n\tN - Number of mirrors"
elif ls /etc/*-release | xargs basename &>- ; then
	echo "Only for Debian/Ubuntu" && exit 1
else
	echo "Could not detect OS" && exit 1
fi
$DEBUG && echo -e "arch $ARCH\nos $OS"

N=0
if [[ "$#" -gt 0 ]]; then
skip="false"
	for args; do
		$skip && skip="false" && shift && set -- "$@" && continue
		if [[ -n $(echo "$args" | grep "^[[:digit:]]\+$") ]]; then
#	       if [[ "$args" == '^[[:digit:]]+$' ]]; then
			[[ "$N" -eq 0 ]] && N="$args" && SRC="$2" && skip="true"
			$DEBUG && echo "N=$N SRC=$SRC"
		elif [[ "${args:0:2}" =~ '^-' ]]; then
			if [[ "${args:0:2}" == '--' ]]; then
				$DEBUG && echo "nonpos-arg $args"
			else
				$DEBUG && echo "pas-arg $args"
			fi
		fi
		shift
		set -- "$@"
	done
else
	echo "$help"
fi

if [ "$N" = "0" ] || ([ "$SRC" != "all" ] && [ "$SRC" != "local" ]); then echo "Select SRC as local or all"; echo "$help"; exit 1; fi

if [[ $OS == "ubuntu" ]]; then
	$DEBUG && echo "Fetching urls:" || echo -n "Fetching urls:"
	if [ $SRC = "local" ]; then
		[ $ARCH = "amd64" ] && mir2=`curl -fsSL http://mirrors.ubuntu.com/mirrors.txt` || mir2="http://ports.ubuntu.com/"
	elif [ $SRC = "all" ]; then
		mir3=`curl -fsSL https://launchpad.net/ubuntu/+archivemirrors | grep --color=none -E -B8 'statusUP|statusSIX' | grep --color=none -o -E "http[s]?:\/\/[^\ |^\"]*"`
		mir2=$(echo "$mir3" | sort -h | uniq)
	fi
	echo -e "\t\t\tdone"
	$DEBUG && echo "Processing urls:" || echo -n "Processing urls: "
	if [[ `nproc` -le 4 ]]; then TRD=$(($(nproc)*2))
		elif [[ `nproc` -le 8 ]]; then TRD=8
		else TRD=`nproc`; fi
	TFILE=$(mktemp aptpipe.XXX)
	trap "rm -f $TFILE; exit 1" 1 2 3 15
	while read -r url; do
		# $DEBUG && echo "$url $url2"
		((i=i%TRD)); ((i++==0)) && if [ $DEBUG ]; then echo -n "."; fi && \
			while [[ `jobs -p | wc -l` -ge $TRD ]]; do wait -n `jobs -p | sed -n 1p`; done
		if $DEBUG; then
			urlcheck "$url" | tee -a $TFILE &
		else
			urlcheck "$url" >> $TFILE &
		fi
	done <<< "$mir2"
	for wt in `seq 3`; do sleep 1; if [[ `jobs -p | wc -l` -eq 0 ]]; then break; else [ $wt = 3 ] && for job in `jobs -p`; do kill -9 $job &>-; done; fi; done
	echo -e "\t\t\tdone fetching"
	$DEBUG && echo -e "We got:\n$(cat $TFILE | sort -h | uniq)"
	mir=$(cat $TFILE | sort -h | uniq)
elif [[ $OS == "debian" ]]; then
	mir2="$(curl -s https://www.debian.org/mirror/list | awk -vN=2 '/Complete List of Mirrors/{++n} /Number of sites listed/{n=2} n>=N' | grep --color=none -A1 href | sed 's~<td valign="top"><a rel="nofollow" href="~~g' | sed 's~">.*</a></td>$~~g' | sed 's~<td valign="top">~~g' | sed 's~</td>~~g')"
	n=0
	mir="$(while read -r line; do
		if [ "$line" = "--" ]; then
			n=1
		else
			if [ "$n" = "1" ]; then
				HREF=$line
				n=$((n+1))
			elif [ "$n" = "2" ]; then
				echo $line | grep -qi $ARCH && echo "$HREF"
				n=0
			fi
		fi
	done <<< "$mir2")"
fi
#set -x
[[ -z "$mir" ]] && echo "Got no mirrors" && exit 1
mirN=$(echo "$mir" | wc -l)
if [[ $N -gt $mirN ]]; then echo "Got only $mirN mirrors, printing all"; N=$mirN; else echo "Got $mirN mirrors, listing $N"; $DEBUG && echo $mir && echo; fi
netselect -s $N $mir
rm $TFILE
#set +x
